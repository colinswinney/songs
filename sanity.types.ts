/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Song = {
  _id: string;
  _type: "song";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  sections?: Array<{
    _key: string;
  } & Section>;
  originalKey?: "c" | "c-sharp" | "d-flat" | "d" | "d-sharp" | "e-flat" | "e" | "f" | "f-sharp" | "g-flat" | "g" | "g-sharp" | "a-flat" | "a" | "a-sharp" | "b-flat" | "b";
  title?: string;
  slug?: Slug;
  artists?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "artist";
  }>;
};

export type Section = {
  _type: "section";
  title?: "intro" | "bridge" | "chorus" | "chorus-two" | "chorus-three" | "chorus-four" | "outro" | "pre-chorus" | "pre-chorus-two" | "pre-chorus-three" | "pre-chorus-four" | "solo" | "solo-two" | "solo-three" | "solo-four" | "verse" | "verse-two" | "verse-three" | "verse-four" | "verse-five" | "verse-six" | "verse-seven" | "verse-eight" | "verse-nine" | "verse-ten";
  repeatsSection?: {
    section?: "intro" | "bridge" | "chorus" | "chorus-two" | "chorus-three" | "chorus-four" | "outro" | "pre-chorus" | "pre-chorus-two" | "pre-chorus-three" | "pre-chorus-four" | "solo" | "solo-two" | "solo-three" | "solo-four" | "verse" | "verse-two" | "verse-three" | "verse-four" | "verse-five" | "verse-six" | "verse-seven" | "verse-eight" | "verse-nine" | "verse-ten";
    chords?: boolean;
    lyrics?: boolean;
  };
  lines?: Array<{
    _key: string;
  } & Line>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SectionTitle = "intro" | "bridge" | "chorus" | "chorus-two" | "chorus-three" | "chorus-four" | "outro" | "pre-chorus" | "pre-chorus-two" | "pre-chorus-three" | "pre-chorus-four" | "solo" | "solo-two" | "solo-three" | "solo-four" | "verse" | "verse-two" | "verse-three" | "verse-four" | "verse-five" | "verse-six" | "verse-seven" | "verse-eight" | "verse-nine" | "verse-ten";

export type Lines = Array<{
  _key: string;
} & Line>;

export type Line = {
  _type: "line";
  chords?: Array<{
    _key: string;
  } & Chord>;
  lyrics?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Chord = {
  _type: "chord";
  note?: "one" | "two" | "three" | "four" | "five" | "six" | "seven" | "rest";
  flatSharp?: "flat" | "sharp" | "double-flat" | "double-sharp";
  quality?: "major" | "minor" | "diminished" | "half-diminished" | "augmented";
  extension?: "six" | "six-nine" | "major-seven" | "eleven" | "thirteen" | "suspended-two" | "suspended-four" | "dominant-seven" | "dominant-nine" | "dominant-seven-sharp-eleven";
  hardStop?: boolean;
  splitChord?: boolean;
  splitNote?: "one" | "two" | "three" | "four" | "five" | "six" | "seven" | "rest";
  splitFlatSharp?: "flat" | "sharp" | "double-flat" | "double-sharp";
  splitQuality?: "major" | "minor" | "diminished" | "half-diminished" | "augmented";
  splitExtension?: "six" | "six-nine" | "major-seven" | "eleven" | "thirteen" | "suspended-two" | "suspended-four" | "dominant-seven" | "dominant-nine" | "dominant-seven-sharp-eleven";
};

export type ChordQuality = "major" | "minor" | "diminished" | "half-diminished" | "augmented";

export type ChordExtension = "six" | "six-nine" | "major-seven" | "eleven" | "thirteen" | "suspended-two" | "suspended-four" | "dominant-seven" | "dominant-nine" | "dominant-seven-sharp-eleven";

export type ChordFlatSharp = "flat" | "sharp" | "double-flat" | "double-sharp";

export type ChordNote = "one" | "two" | "three" | "four" | "five" | "six" | "seven" | "rest";

export type OriginalKey = "c" | "c-sharp" | "d-flat" | "d" | "d-sharp" | "e-flat" | "e" | "f" | "f-sharp" | "g-flat" | "g" | "g-sharp" | "a-flat" | "a" | "a-sharp" | "b-flat" | "b";

export type Artist = {
  _id: string;
  _type: "artist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Song | Section | SectionTitle | Lines | Line | Chord | ChordQuality | ChordExtension | ChordFlatSharp | ChordNote | OriginalKey | Artist | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: SONG_LINK_LIST_QUERY
// Query: *[	_type == "song"] | order(title asc) {_id, title, slug}
export type SONG_LINK_LIST_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: ARTIST_LINK_LIST_QUERY
// Query: *[	_type == "artist"] | order(title asc) {_id, title, slug}
export type ARTIST_LINK_LIST_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: SONG_FULL_DISPLAY_QUERY
// Query: *[	_type == "song" &&	slug.current == $slug	][0]{	...,	title,	originalKey,	artists[]->{		slug,		title	},	sections}
export type SONG_FULL_DISPLAY_QUERYResult = {
  _id: string;
  _type: "song";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  sections: Array<{
    _key: string;
  } & Section> | null;
  originalKey: "a-flat" | "a-sharp" | "a" | "b-flat" | "b" | "c-sharp" | "c" | "d-flat" | "d-sharp" | "d" | "e-flat" | "e" | "f-sharp" | "f" | "g-flat" | "g-sharp" | "g" | null;
  title: string | null;
  slug?: Slug;
  artists: Array<{
    slug: Slug | null;
    title: string | null;
  }> | null;
} | null;
// Variable: ARTIST_FULL_DISPLAY_QUERY
// Query: *[	_type == "artist" &&	slug.current == $slug	][0]{	...,	title,	"songs": *[_type=='song' && references(^._id)]{ title, slug }}
export type ARTIST_FULL_DISPLAY_QUERYResult = {
  _id: string;
  _type: "artist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  songs: Array<{
    title: string | null;
    slug: Slug | null;
  }>;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[\n\t_type == \"song\"\n] | order(title asc) {_id, title, slug}": SONG_LINK_LIST_QUERYResult;
    "*[\n\t_type == \"artist\"\n] | order(title asc) {_id, title, slug}": ARTIST_LINK_LIST_QUERYResult;
    "*[\n\t_type == \"song\" &&\n\tslug.current == $slug\n\t][0]{\n\t...,\n\ttitle,\n\toriginalKey,\n\tartists[]->{\n\t\tslug,\n\t\ttitle\n\t},\n\tsections\n}": SONG_FULL_DISPLAY_QUERYResult;
    "*[\n\t_type == \"artist\" &&\n\tslug.current == $slug\n\t][0]{\n\t...,\n\ttitle,\n\t\"songs\": *[_type=='song' && references(^._id)]{ title, slug }\n}": ARTIST_FULL_DISPLAY_QUERYResult;
  }
}
